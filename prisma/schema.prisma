generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(uuid())
  email         String @unique
  name          String
  password_hash String

  created_at DateTime @default(now())

  Category   Category[]
  Employee   Employee[]
  Equipment  Equipment[]
  Allocation Allocation[]
  Log        Log[]

  @@map("users")
}

model Category {
  id          String  @id @default(uuid())
  name        String
  description String?

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Equipment Equipment[]

  @@map("categories")
}

model Employee {
  id           String @id @default(uuid())
  name         String
  cpf          String @unique
  registration Int    @unique
  sector       String

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  deleted_at DateTime?
  Allocation Allocation[]

  @@map("employees")
}

model Equipment {
  id          String @id @default(uuid())
  code        Int
  name        String
  category_id String

  quantity           Int @default(1)
  available_quantity Int @default(1)

  category Category @relation(fields: [category_id], references: [id])

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  deleted_at DateTime?
  Allocation Allocation[]

  @@map("equipments")
}

model Allocation {
  id                 String    @id @default(uuid())
  equipment_id       String
  employee_id        String
  start_date         DateTime
  end_date           DateTime?
  allocated_quantity Int
  user_id            String

  // status: 0 - allocated, 1 - returned
  status Int @default(0)

  equipment Equipment @relation(fields: [equipment_id], references: [id])
  employee  Employee  @relation(fields: [employee_id], references: [id])
  user      User      @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("allocations")
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
}

model Log {
  id         String     @id @default(uuid())
  user_id    String
  action     ActionType
  entity     String
  entity_id  String
  details    String?
  created_at DateTime   @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("logs")
}
